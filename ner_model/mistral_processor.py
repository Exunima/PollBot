import json
import re
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig, pipeline

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
model_path = "F:/BOT_TELEGRAM/PollBot/Mistral-7B"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 4-bit –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype="float16"
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∏ –º–æ–¥–µ–ª—å
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForCausalLM.from_pretrained(
    model_path,
    device_map="auto",
    quantization_config=bnb_config,
    trust_remote_code=True
).to(device)

# –°–æ–∑–¥–∞—ë–º –ø–∞–π–ø–ª–∞–π–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
generator = pipeline("text-generation", model=model, tokenizer=tokenizer)

print("‚úÖ Mistral-7B –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

# –î–æ–ø–æ–ª–Ω—è–µ–º/—É—Å–∏–ª–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å
# –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–ª–∞ –∫–ª—é—á "type":
prompt_template = """
–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤ –∏ –æ–ø—Ä–æ—Å–æ–≤.  
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî **–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å PDF-—Ç–µ—Å—Ç –≤ JSON —Å—Ç—Ä–æ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ** –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –±—É–∫–≤–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤, 
–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á `"type"` = `"test"` –∏–ª–∏ `"survey"`.  

---

### **üìå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞:**
- –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å **–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä, `"–û—Ç–≤–µ—Ç: A"`), —ç—Ç–æ **–¢–ï–°–¢**.
- –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç, —ç—Ç–æ **–û–ü–†–û–°**.

---

### **üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
#### **1Ô∏è‚É£ –í–æ–ø—Ä–æ—Å—ã**
‚úÖ –°–æ—Ö—Ä–∞–Ω—è–π **–ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è** (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∏—Å—Ö–æ–¥–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é: —Ä–∏–º—Å–∫–∏–µ/–∞—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã, —Å–∏–º–≤–æ–ª—ã).  
‚úÖ –û–±—ä–µ–¥–∏–Ω—è–π **—Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—á–∞–ª–æ –Ω–∞ —Å—Ç—Ä. 1, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä. 2).  
‚úÖ –£–¥–∞–ª—è–π **—Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–º–µ—Ç–∫–∏**: `[–í–æ–ø—Ä–æ—Å ‚ÑñIII]`, `(–†–∞–∑–¥–µ–ª A)` –∏ —Ç.–ø.

#### **2Ô∏è‚É£ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤**
‚úÖ **–£–¥–∞–ª—è–π –ª—é–±—ã–µ –º–∞—Ä–∫–µ—Ä—ã** (`–∞)`, `–±)`, `1.`, `-` –∏ —Ç.–¥.) –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.  
‚úÖ **–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –º–∞—Ä–∫–µ—Ä—ã** (`‚ë†`, `¬ß`, `1.`, `–±)`) –≤ **–ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤**.  
‚úÖ **–°–æ—Ö—Ä–∞–Ω—è–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫** –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.  

üìå **–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:**  
**–ò—Å—Ö–æ–¥–Ω–∏–∫:** `¬ß) int —Ö—Ä–∞–Ω–∏—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞...`  
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** `{ "text": "int —Ö—Ä–∞–Ω–∏—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞...", "correct": false }`  

---

### **üìå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö**
‚úÖ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —É–∫–∞–∑–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `"1: –≤, 2: –∞,–±"`), —Å–ª–µ–¥—É–π —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
  1Ô∏è‚É£ **–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–π –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤** —Å –∏—Ö –ø–æ—Ä—è–¥–∫–æ–º –ø–æ—è–≤–ª–µ–Ω–∏—è.  
  2Ô∏è‚É£ **–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –±—É–∫–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∏–Ω–¥–µ–∫—Å—ã –º–∞—Å—Å–∏–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤**:  
     - `"–≤"` ‚Üí 3-–π –≤–∞—Ä–∏–∞–Ω—Ç (`index = 2`)  
     - `"–∞,–±"` ‚Üí 1-–π –∏ 2-–π –≤–∞—Ä–∏–∞–Ω—Ç—ã (`index = 0, 1`)  
‚úÖ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç **—Ñ—Ä–∞–∑—É `"–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤"`**, **–æ—Ç–º–µ—á–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ `correct: true`**.

---

### **üìå –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–¢–û–õ–¨–ö–û JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞!):**
```json
{
  "type": "test" –∏–ª–∏ "survey",
  "title": "–¢–µ–º–∞ –∏–∑ PDF",
  "questions": [
    {
      "text": "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞...",
      "options": [
        { "text": "–≤–∞—Ä–∏–∞–Ω—Ç 1", "correct": false },
        { "text": "–≤–∞—Ä–∏–∞–Ω—Ç 2", "correct": true }
      ]
    },
    ...
  ]
}


üìå **–¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
{text}
"""


def extract_json(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON-–æ–±—ä–µ–∫—Ç –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    text = text.strip()
    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏ Markdown ```json ... ```
    text = re.sub(r"```json", "", text)
    text = re.sub(r"```", "", text)

    # –ò—â–µ–º –±–ª–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å { –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è }
    match = re.search(r"{.*?}", text, re.DOTALL)
    if match:
        json_text = match.group(0).strip()
        return json_text
    return None


def clean_json_keys(json_data):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∫–ª—é—á–µ–π JSON"""
    if isinstance(json_data, dict):
        return {k.strip(): clean_json_keys(v) for k, v in json_data.items()}
    elif isinstance(json_data, list):
        return [clean_json_keys(item) for item in json_data]
    return json_data


def guess_type_by_text(raw_text: str) -> str:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞:
    –ï—Å–ª–∏ –≤–∏–¥–∏–º "–û—Ç–≤–µ—Ç:" –∏–ª–∏ "Answer:" –≤ —Å—ã—Ä–æ–º —Ç–µ–∫—Å—Ç–µ ‚Üí —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç,
    –∏–Ω–∞—á–µ ‚Üí –æ–ø—Ä–æ—Å.
    """
    lower_text = raw_text.lower()
    if "–æ—Ç–≤–µ—Ç:" in lower_text or "answer:" in lower_text:
        return "test"
    return "survey"


def process_text_with_mistral(text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ç–µ—Å—Ç–∞–º–∏/–æ–ø—Ä–æ—Å–∞–º–∏, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è, —á—Ç–æ –µ—Å—Ç—å –∫–ª—é—á 'type'."""

    # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å KeyError –≤ .format()
    safe_text = text.replace("{", "{{").replace("}", "}}")
    prompt = prompt_template.replace("{text}", safe_text)

    result = generator(
        prompt,
        max_new_tokens=700,
        temperature=0.1,
        top_p=0.9,
        repetition_penalty=1.2,
        do_sample=False
    )[0]["generated_text"]

    print("üîç –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ):\n", result)

    extracted_json = extract_json(result)
    if not extracted_json:
        ...
        return {
            "type": guess_type_by_text(text),
            "title": "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            "questions": []
        }

    try:
        structured_data = json.loads(extracted_json)
        if isinstance(structured_data, list) and len(structured_data) > 0:
            structured_data = structured_data[0]
    except json.JSONDecodeError as e:
        ...
        return {
            "type": guess_type_by_text(text),
            "title": "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            "questions": []
        }

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –≤ –ø–æ—Ä—è–¥–æ–∫
    structured_data = clean_json_keys(structured_data)

    # –ï—Å–ª–∏ –Ω–µ—Ç "type", –¥–æ–±–∞–≤–ª—è–µ–º
    if "type" not in structured_data:
        print("‚ùå –û—à–∏–±–∫–∞: –í JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'type'. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
        structured_data["type"] = guess_type_by_text(text)

    # [–ù–û–í–û–ï] –ï—Å–ª–∏ –Ω–µ—Ç "title", –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    if "title" not in structured_data:
        print("‚ùå –û—à–∏–±–∫–∞: –í JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'title'. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
        structured_data["title"] = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    # [–ù–û–í–û–ï] –ï—Å–ª–∏ –Ω–µ—Ç "questions", –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if "questions" not in structured_data:
        print("‚ùå –û—à–∏–±–∫–∞: –í JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'questions'. –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
        structured_data["questions"] = []

    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π JSON:", json.dumps(structured_data, indent=2, ensure_ascii=False))
    return structured_data

