import os
import logging
from uuid import uuid4
from tempfile import NamedTemporaryFile
from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from config.token_config import TESSERACT_PATH
from config.state_config import ConfirmOCRState
from ner_model.mistral_processor import process_text_with_mistral, clean_json_keys
from database.tables.users import User
from database.tables.survey_data import Survey, SurveyQuestion, SurveyAnswerOption, SurveyType, QuestionType
from database.tables.test_data import Test, TestQuestion, TestAnswerOption
from creation_survey.Photo_creator.photo_handler import extract_text_from_photo
from keyboards.button_creators.confirm_ocr_keyboard import confirm_ocr_keyboard

import pytesseract
pytesseract.pytesseract.tesseract_cmd = TESSERACT_PATH

TEMP_DIR = "F:/BOT_TELEGRAM/PollBot/temp_files/photo"
os.makedirs(TEMP_DIR, exist_ok=True)


async def process_photo_document(message: types.Message, state: FSMContext, bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    document_type = data.get("document_type", "survey")

    file_name = "photo.jpg"

    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document and message.document.mime_type.startswith("image/"):
        file_id = message.document.file_id
        file_name = message.document.file_name or "image.jpg"
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª).")
        await state.clear()
        return

    file_info = await bot.get_file(file_id)
    with NamedTemporaryFile(delete=False, suffix=os.path.splitext(file_name)[-1], dir=TEMP_DIR) as tmp:
        tmp_path = tmp.name
        await bot.download_file(file_info.file_path, tmp_path)

    try:
        await message.answer("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        extracted_text = extract_text_from_photo(tmp_path)
        logging.info(f"[OCR] –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{extracted_text}")

        cleaned_text = "\n".join([line.strip() for line in extracted_text.split("\n") if line.strip()])

        if not cleaned_text:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            await state.clear()
            return

        await state.update_data(extracted_text=cleaned_text)
        await message.answer(
            f"üìã –í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:\n\n{cleaned_text[:3000]}",
            reply_markup=confirm_ocr_keyboard()
        )
        await state.set_state(ConfirmOCRState.waiting_for_choice)

    finally:
        if os.path.exists(tmp_path):
            os.remove(tmp_path)


async def process_clean_text_after_ocr(message: types.Message, state: FSMContext, bot: Bot, cleaned_text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    data = await state.get_data()
    document_type = data.get("document_type", "survey")
    duration_minutes = int(data.get("duration_minutes", 0))
    attempts = int(data.get("attempts", 1))
    duration_days = int(data.get("duration_days", 0))
    filename = "photo.jpg"

    await message.answer("üîç –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –≤ Mistral-7B –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    structured_data = process_text_with_mistral(cleaned_text, f"photo_{document_type}", filename)
    logging.info(f"[Mistral] –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{structured_data}")

    # –ü–∞—Ä—Å–∏–Ω–≥ JSON
    import json
    if isinstance(structured_data, str):
        try:
            structured_data = json.loads(structured_data)
        except json.JSONDecodeError:
            await message.answer("‚ùå JSON –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω.")
            await state.clear()
            return

    if isinstance(structured_data, list) and structured_data:
        structured_data = structured_data[0]

    if not isinstance(structured_data, dict):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.")
        await state.clear()
        return

    structured_data = clean_json_keys(structured_data)
    structured_data.setdefault("type", document_type)
    structured_data["title"] = structured_data.get("title") or "–ò–∑ —Ñ–æ—Ç–æ"
    questions_data = structured_data.get("questions", [])

    if not questions_data:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        await state.clear()
        return

    await message.answer(f"üî¢ –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(questions_data)}")

    user = await User.get_or_none(telegram_id=message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        await state.clear()
        return

    access_key = str(uuid4())

    if structured_data["type"] == "test":
        test = await Test.create(
            creator=user,
            title=structured_data["title"],
            duration_minutes=duration_minutes,
            attempts=attempts,
            access_key=access_key
        )
        saved_count = 0
        for q in questions_data:
            if not q.get("text") or not q.get("options"):
                continue
            if not any(opt.get("correct", False) for opt in q["options"] if isinstance(opt, dict)):
                continue
            question = await TestQuestion.create(test=test, question_text=q["text"])
            for opt in q["options"]:
                if isinstance(opt, dict) and "text" in opt:
                    option = await TestAnswerOption.create(question=question, option_text=opt["text"])
                    if opt.get("correct"):
                        await question.correct_answers.add(option)
            saved_count += 1

        await message.answer(
            f"‚úÖ –¢–µ—Å—Ç ¬´{test.title}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\nüîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞: <code>{access_key}</code>\nüìå –í–æ–ø—Ä–æ—Å–æ–≤: {saved_count}",
            parse_mode="HTML"
        )

    elif structured_data["type"] == "survey":
        survey = await Survey.create(
            creator=user,
            survey_title=structured_data["title"],
            survey_type=SurveyType.REGISTERED,
            is_anonymous=False,
            access_key=access_key,
            attempts=1,
            duration_days=duration_days
        )
        saved_count = 0
        for q in questions_data:
            if not q.get("text") or not q.get("options"):
                continue
            question = await SurveyQuestion.create(
                survey=survey,
                question_text=q["text"],
                question_type=QuestionType.POLL
            )
            for option in q["options"]:
                await SurveyAnswerOption.create(question=question, option_text=str(option).strip())
            saved_count += 1

        await message.answer(
            f"‚úÖ –û–ø—Ä–æ—Å ¬´{survey.survey_title}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
            f"üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞: <code>{access_key}</code>\n"
            f"üìå –í–æ–ø—Ä–æ—Å–æ–≤: {saved_count}",
            parse_mode="HTML"
        )

    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

    await state.clear()
