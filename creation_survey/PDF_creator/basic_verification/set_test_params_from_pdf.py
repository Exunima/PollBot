from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from config.state_config import TestFromPdfState
from creation_survey.Manual_creator import validate_input

router = Router()


@router.message(TestFromPdfState.waiting_for_duration)
async def ask_attempts(message: types.Message, state: FSMContext):
    value = validate_input.validate_duration(message.text)
    if value == -1:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 180.")
        return
    await state.update_data(duration_minutes=value)
    await state.set_state(TestFromPdfState.waiting_for_attempts)
    await message.answer("üîÅ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (0 ‚Äî –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ):")


@router.message(TestFromPdfState.waiting_for_attempts)
async def ready_to_upload_pdf(message: types.Message, state: FSMContext):
    value = validate_input.validate_attempts(message.text)
    if value == -1:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
        return
    await state.update_data(attempts=value)
    await state.set_state(TestFromPdfState.waiting_for_pdf)
    await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–º.")
