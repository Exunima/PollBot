import os
from aiogram import types
from aiogram.fsm.context import FSMContext
from creation_survey.PDF_creator.pdf_handler import extract_text_from_pdf
from ner_model.deepseek_processor import process_text_with_deepseek
from database.tables.survey_data import Survey, SurveyQuestion, SurveyAnswerOption

UPLOAD_FOLDER = "F:/BOT_TELEGRAM/PollBot/temp_files/pdf"


async def process_pdf_document(message: types.Message, state: FSMContext):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π PDF-—Ñ–∞–π–ª """
    pdf = message.document
    file_path = os.path.join(UPLOAD_FOLDER, pdf.file_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF-—Ñ–∞–π–ª
    await pdf.download(destination=file_path)
    await message.answer("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF...")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
    extracted_text = extract_text_from_pdf(file_path)

    if not extracted_text.strip():
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF.")
        await state.clear()
        return

    await message.answer("üîç –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –≤ DeepSeek –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")

    # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—Å—Ç –≤ DeepSeek
    structured_data = process_text_with_deepseek(extracted_text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å JSON
    if not structured_data:
        await message.answer("‚ö†Ô∏è DeepSeek –Ω–µ —Å–º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ—Å—Ç.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç –≤ –ë–î
    await save_survey_to_db(structured_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    await message.answer(f"‚úÖ –í–æ—Ç, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n{structured_data}")
    await message.answer("–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç.")

    await state.clear()


async def save_survey_to_db(data):
    """ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö """
    survey = await Survey.create(survey_title=data["title"], survey_type="registered")

    for q in data["questions"]:
        question = await SurveyQuestion.create(survey=survey, question_text=q["question"], question_type="poll")

        for option in q["options"]:
            await SurveyAnswerOption.create(question=question, option_text=option)

    return survey
