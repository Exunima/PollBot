import os
import json
import logging
from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from creation_survey.PDF_creator.pdf_handler import extract_text_from_pdf
from ner_model.mistral_processor import process_text_with_mistral
from database.tables.survey_data import Survey, SurveyQuestion, SurveyAnswerOption, SurveyType, QuestionType
from database.tables.test_data import Test, TestQuestion, TestAnswerOption
from database.tables.users import User
from uuid import uuid4

UPLOAD_FOLDER = "F:/BOT_TELEGRAM/PollBot/temp_files/pdf"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)


def clean_json_keys(json_data):
    """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∫—Ä—ã—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–ª—é—á–µ–π JSON"""
    if isinstance(json_data, dict):
        return {k.strip(): clean_json_keys(v) for k, v in json_data.items()}
    elif isinstance(json_data, list):
        return [clean_json_keys(item) for item in json_data]
    return json_data


async def process_pdf_document(message: types.Message, state: FSMContext, bot: Bot):
    pdf = message.document
    file_path = os.path.join(UPLOAD_FOLDER, pdf.file_name)
    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    # 1) –°–∫–∞—á–∏–≤–∞–µ–º PDF
    file_info = await bot.get_file(pdf.file_id)
    await bot.download_file(file_info.file_path, destination=file_path)
    logging.info(f"–§–∞–π–ª PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {file_path}")

    await message.answer("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF...")

    # 2) –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    extracted_text = extract_text_from_pdf(file_path)
    cleaned_text = "\n".join([line.strip() for line in extracted_text.split("\n") if line.strip()])
    logging.info(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{cleaned_text}")

    if not cleaned_text:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF.")

        # –£–¥–∞–ª—è–µ–º PDF-—Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if os.path.exists(file_path):
            os.remove(file_path)
            logging.info(f"PDF —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {file_path}")

        await state.clear()
        return

    await message.answer("üîç –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –≤ Mistral-7B –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")

    # 3) –£–∑–Ω–∞—ë–º, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (test/survey)
    user_data = await state.get_data()

    duration_minutes = int(user_data.get("duration_minutes", 0))
    attempts = int(user_data.get("attempts", 1))
    duration_days = int(user_data.get("duration_days", 0))
    document_type = user_data.get("document_type", "test")

    prompt_type = user_data.get("document_type", "survey")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é survey
    logging.info(f"document_type (prompt_type) = {prompt_type}")

    # 4) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª—å—é
    structured_data = process_text_with_mistral(cleaned_text, prompt_type, filename=pdf.file_name)
    logging.info(f"–û—Ç–≤–µ—Ç Mistral (structured_data): {structured_data}")

    # 5) –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–±—É–µ–º JSON-–¥–µ–∫–æ–¥
    if isinstance(structured_data, str):
        try:
            structured_data = json.loads(structured_data)
        except json.JSONDecodeError as e:
            logging.error(f"JSONDecodeError: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: JSON –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω, –æ—Ç–≤–µ—Ç Mistral-7B –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ - –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if isinstance(structured_data, list) and len(structured_data) > 0:
        structured_data = structured_data[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø (dict)
    if not isinstance(structured_data, dict):
        logging.warning("structured_data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è dict! –ü—Ä–µ—Ä—ã–≤–∞–µ–º.")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: Mistral-7B –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON (–Ω–µ dict).")
        return

    structured_data = clean_json_keys(structured_data)

    # 6) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ type, –µ—Å–ª–∏ –Ω–µ—Ç - –æ—à–∏–±–∫–∞
    if "type" not in structured_data:
        logging.warning("–í structured_data –Ω–µ—Ç –ø–æ–ª—è 'type'!")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: Mistral-7B –Ω–µ —É–∫–∞–∑–∞–ª–∞ 'type' (test –∏–ª–∏ survey).")
        return

    # 7) –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ title, –∏–ª–∏ –æ–Ω –ø—É—Å—Ç - –±–µ—Ä—ë–º –∏–º—è —Ñ–∞–π–ª–∞
    doc_name = pdf.file_name.rsplit(".", 1)[0]
    title_in_json = structured_data.get("title", "").strip() or doc_name
    structured_data["title"] = title_in_json

    # 8) –°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    questions_data = structured_data.get("questions", [])
    found_questions = len(questions_data)
    logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ JSON: {found_questions}")
    await message.answer(f"üî¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ JSON –æ—Ç –º–æ–¥–µ–ª–∏: {found_questions}")

    # 9) –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await User.get_or_none(telegram_id=message.from_user.id)
    if not user:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")

        # –£–¥–∞–ª—è–µ–º PDF-—Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if os.path.exists(file_path):
            os.remove(file_path)
            logging.info(f"PDF —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {file_path}")

        await state.clear()
        return

    # 10) –°–æ–∑–¥–∞—ë–º –∫–ª—é—á
    access_key = str(uuid4())
    logging.info(f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–ª—é—á: {access_key}")

    # 11) –°–æ–∑–¥–∞—ë–º –ª–∏–±–æ —Ç–µ—Å—Ç, –ª–∏–±–æ –æ–ø—Ä–æ—Å
    if structured_data["type"] == "survey":
        survey = await Survey.create(
            creator=user,
            survey_title=title_in_json,
            survey_type=SurveyType.REGISTERED,
            is_anonymous=False,
            access_key=access_key,
            attempts=1,
            duration_days=duration_days
        )

        logging.info(f"–°–æ–∑–¥–∞–Ω Survey c ID={survey.id}, title={survey.survey_title}")

        saved_count = 0
        for i, q in enumerate(questions_data, start=1):
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
            logging.info(f"[SURVEY] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ #{i}: {q}")

            text_val = q.get("text", "").strip()
            options_val = q.get("options")
            if not text_val or not options_val:
                logging.warning(f"[SURVEY] –ü—Ä–æ–ø—É—â–µ–Ω –≤–æ–ø—Ä–æ—Å #{i}, —Ç.–∫. text –∏–ª–∏ options –ø—É—Å—Ç—ã–µ. text='{text_val}', options='{options_val}'")
                continue

            question = await SurveyQuestion.create(
                survey=survey,
                question_text=text_val,
                question_type=QuestionType.POLL
            )
            logging.info(f"[SURVEY] question_id={question.id}, question_text='{text_val}'")

            for opt_idx, option_text in enumerate(options_val, start=1):
                opt_str = str(option_text).strip()  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ str
                if not opt_str:
                    logging.warning(f"[SURVEY] –ü—É—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º. opt_idx={opt_idx}")
                    continue
                created_opt = await SurveyAnswerOption.create(
                    question=question,
                    option_text=opt_str
                )
                logging.info(f"[SURVEY] answer_option_id={created_opt.id}, text='{opt_str}'")

            saved_count += 1

        await message.answer(
            f"‚úÖ –û–ø—Ä–æ—Å ¬´{survey.survey_title}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
            f"üìÖ –î–Ω–µ–π –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: {duration_days if duration_days else '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}\n"
            f"üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞: <code>{access_key}</code>\n"
            f"üìå –í–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {saved_count}",
            parse_mode="HTML"
        )

    elif structured_data["type"] == "test":
        test = await Test.create(
            creator=user,
            title=title_in_json,
            duration_minutes=duration_minutes,
            attempts=attempts,
            access_key=access_key
        )
        logging.info(f"–°–æ–∑–¥–∞–Ω Test c ID={test.id}, title={test.title}")

        saved_count = 0
        for i, q in enumerate(questions_data, start=1):
            logging.info(f"[TEST] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ #{i}: {q}")

            text_val = q.get("text", "").strip()
            options_val = q.get("options")
            if not text_val or not options_val:
                logging.warning(f"[TEST] –ü—Ä–æ–ø—É—â–µ–Ω –≤–æ–ø—Ä–æ—Å #{i}, —Ç.–∫. text –∏–ª–∏ options –ø—É—Å—Ç—ã–µ. text='{text_val}', options='{options_val}'")
                continue

            if not any(opt.get("correct", False) for opt in options_val if isinstance(opt, dict)):
                logging.warning(f"[TEST] –ü—Ä–æ–ø—É—â–µ–Ω –≤–æ–ø—Ä–æ—Å #{i}, –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (correct=true)")
                continue

            question = await TestQuestion.create(
                test=test,
                question_text=text_val
            )
            logging.info(f"[TEST] –°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å ID={question.id}, text='{text_val}'")

            option_objs = []
            for opt_idx, opt_dict in enumerate(options_val, start=1):
                # opt_dict –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–∏–¥–∞ {"text": "...", "correct": bool}
                if not isinstance(opt_dict, dict):
                    logging.warning(f"[TEST] –í–æ–ø—Ä–æ—Å #{i}, –≤–∞—Ä–∏–∞–Ω—Ç #{opt_idx} - –Ω–µ dict! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º. opt_dict={opt_dict}")
                    continue

                opt_text = opt_dict.get("text", "").strip()
                if not opt_text:
                    logging.warning(f"[TEST] –í–æ–ø—Ä–æ—Å #{i}, –≤–∞—Ä–∏–∞–Ω—Ç #{opt_idx} - text –ø—É—Å—Ç–æ–π! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                created_opt = await TestAnswerOption.create(
                    question=question,
                    option_text=opt_text
                )
                is_correct = bool(opt_dict.get("correct", False))
                logging.info(f"[TEST] answer_option_id={created_opt.id}, text='{opt_text}', correct={is_correct}")
                option_objs.append((created_opt, is_correct))

            # –î–æ–±–∞–≤–ª—è–µ–º correct
            for (opt_item, is_correct) in option_objs:
                if is_correct:
                    await question.correct_answers.add(opt_item)

            saved_count += 1

        await message.answer(
            f"‚úÖ –¢–µ—Å—Ç ¬´{test.title}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: {duration_minutes} –º–∏–Ω.\n"
            f"üîÅ –ü–æ–ø—ã—Ç–æ–∫: {'–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ' if attempts == 0 else attempts}\n"
            f"üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞: <code>{access_key}</code>\n"
            f"üìå –í–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {saved_count}",
            parse_mode="HTML"
        )

    else:
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {structured_data['type']}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è 'survey' –∏–ª–∏ 'test'.")

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await message.answer("üéØ –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏–ª–∏ –æ–ø—Ä–æ—Å–∞!")

    # –£–¥–∞–ª—è–µ–º PDF-—Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if os.path.exists(file_path):
        os.remove(file_path)
        logging.info(f"PDF —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {file_path}")

    await state.clear()
    logging.info("process_pdf_document –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")
