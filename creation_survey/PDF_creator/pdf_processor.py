import os
import json
from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from creation_survey.PDF_creator.pdf_handler import extract_text_from_pdf
from ner_model.mistral_processor import process_text_with_mistral
from database.tables.survey_data import Survey, SurveyQuestion, SurveyAnswerOption
from database.tables.test_data import Test, TestQuestion, TestAnswerOption

UPLOAD_FOLDER = "F:/BOT_TELEGRAM/PollBot/temp_files/pdf"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
os.makedirs(UPLOAD_FOLDER, exist_ok=True)


def clean_json_keys(json_data):
    """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∫—Ä—ã—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–ª—é—á–µ–π JSON"""
    if isinstance(json_data, dict):
        return {k.strip(): clean_json_keys(v) for k, v in json_data.items()}
    elif isinstance(json_data, list):
        return [clean_json_keys(item) for item in json_data]
    return json_data


async def process_pdf_document(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ Mistral-7B"""

    pdf = message.document
    file_path = os.path.join(UPLOAD_FOLDER, pdf.file_name)

    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    file_info = await bot.get_file(pdf.file_id)
    await bot.download_file(file_info.file_path, destination=file_path)

    await message.answer("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF...")

    extracted_text = extract_text_from_pdf(file_path)

    # üî¥ –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
    cleaned_text = "\n".join([line.strip() for line in extracted_text.split("\n") if line.strip()])

    if not cleaned_text:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF.")
        await state.clear()
        return

    await message.answer("üîç –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –≤ Mistral-7B –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")

    structured_data = process_text_with_mistral(cleaned_text)

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ structured_data —É–∂–µ –æ–±—ä–µ–∫—Ç–æ–º JSON
    if isinstance(structured_data, str):
        try:
            structured_data = json.loads(structured_data)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –æ–±—ä–µ–∫—Ç Python
        except json.JSONDecodeError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: JSON –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–Ω, –æ—Ç–≤–µ—Ç Mistral-7B –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return

    # ‚úÖ –ï—Å–ª–∏ JSON –ø—Ä–∏—à—ë–ª –≤ —Å–ø–∏—Å–∫–µ `[{}]`, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if isinstance(structured_data, list) and len(structured_data) > 0:
        structured_data = structured_data[0]

    if not isinstance(structured_data, dict):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: Mistral-7B –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON (–ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫, –æ–∂–∏–¥–∞–ª—Å—è –æ–±—ä–µ–∫—Ç).")
        return

    # ‚úÖ –û—á–∏—Å—Ç–∫–∞ JSON –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    structured_data = clean_json_keys(structured_data)

    if "type" not in structured_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: Mistral-7B –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞, —ç—Ç–æ —Ç–µ—Å—Ç –∏–ª–∏ –æ–ø—Ä–æ—Å.")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    if structured_data["type"] == "survey":
        survey = await Survey.create(survey_title=structured_data["title"], survey_type="registered")

        for q in structured_data["questions"]:
            question = await SurveyQuestion.create(survey=survey, question_text=q["text"], question_type="poll")

            for option in q["options"]:
                await SurveyAnswerOption.create(question=question, option_text=option)

        await message.answer("‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ!")

    elif structured_data["type"] == "test":
        test = await Test.create(title=structured_data["title"], duration_minutes=30, attempts=1)

        for q in structured_data["questions"]:
            question = await TestQuestion.create(test=test, question_text=q["text"])

            for option in q["options"]:
                await TestAnswerOption.create(question=question, option_text=option["text"],
                                              is_correct=option.get("correct", False))  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!

        await message.answer("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ!")

    await message.answer("üéØ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏–ª–∏ –æ–ø—Ä–æ—Å–∞!")

    await state.clear()


async def save_survey_to_db(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    survey = await Survey.create(survey_title=data["title"], survey_type="registered")

    for q in data["questions"]:
        question = await SurveyQuestion.create(survey=survey, question_text=q["text"], question_type="poll")

        for option in q["options"]:
            await SurveyAnswerOption.create(question=question, option_text=option)

    return survey
