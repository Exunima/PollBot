from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from datetime import datetime, timezone
from database.tables.survey_data import Survey
from database.tables.test_data import Test
from aiogram.filters import Command
from config.state_config import QuizState
from keyboards.button_creators.quiz_start_keyboard import get_quiz_start_keyboard
from time_poll.time_checker import check_survey_expiration

router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start_quiz ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
@router.message(Command("start_quiz"))
async def ask_quiz_key(message: types.Message, state: FSMContext):
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞/—Ç–µ—Å—Ç–∞:")
    await state.set_state(QuizState.waiting_for_key)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–ª—é—á
@router.message(QuizState.waiting_for_key)
async def check_quiz_key(message: types.Message, state: FSMContext):
    key = message.text.strip()
    survey = await Survey.get_or_none(access_key=key)
    test = await Test.get_or_none(access_key=key)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ –∫–ª—é—á—É
    if survey:
        if await check_survey_expiration(survey):
            await message.answer("‚ùå –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ.")
            return
        quiz_type, quiz_id = "survey", survey.id
    elif test:
        quiz_type, quiz_id = "test", test.id
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ä–æ—Å–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        quiz_id=quiz_id,
        quiz_type=quiz_type,
        start_time=datetime.now(timezone.utc).isoformat()
    )
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ?", reply_markup=get_quiz_start_keyboard())
    await state.set_state(QuizState.confirm_start)
