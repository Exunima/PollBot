from database.tables.survey_data import Survey, SurveyQuestion, SurveyResponse


async def calculate_survey_results(survey_id: int) -> str:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    - –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≥–æ–ª–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –æ—Ç–≤–µ—Ç–∞.
    """
    survey = await Survey.get_or_none(id=survey_id).prefetch_related("questions__answer_options")
    if not survey:
        return "‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    total_votes = await SurveyResponse.filter(
        question__survey_id=survey_id
    ).count()

    if total_votes == 0:
        return "‚ùå –í —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤."

    result_text = [f"üìä –ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞ \"{survey.survey_title}\":", f"üë• –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ: {total_votes} —á–µ–ª–æ–≤–µ–∫\n"]

    questions = await SurveyQuestion.filter(survey=survey).prefetch_related("answer_options")
    for question in questions:
        result_text.append(f"‚ùì {question.question_text}")

        for option in await question.answer_options.all():
            option_votes = await SurveyResponse.filter(selected_option=option).count()
            percentage = (option_votes / total_votes) * 100 if total_votes else 0
            result_text.append(f"‚Äî {option.option_text}: {option_votes} –≥–æ–ª–æ—Å–æ–≤ ({percentage:.1f}%)")

        result_text.append("")  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏

    return "\n".join(result_text)
