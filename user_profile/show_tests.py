from database.tables.test_data import Test, TestQuestion, TestResult
from database.tables.survey_data import Survey, SurveyQuestion
from database.tables.users import User
from screch.survey_results import calculate_survey_results


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
async def show_user_tests(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    user = await User.get_or_none(telegram_id=message.from_user.id)
    if not user:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        return

    user_tests = await Test.filter(creator=user).all()
    if not user_tests:
        await message.answer("üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        return

    response = "üìã –í–∞—à–∏ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for test in user_tests:
        questions = await TestQuestion.filter(test=test).all()
        if not questions or not test.title:
            continue

        response += (
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title}\n"
            f"üîë –ö–ª—é—á: `{test.access_key}`\n"
            f"üïí –í—Ä–µ–º—è: {test.duration_minutes if test.duration_minutes else '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ'} –º–∏–Ω—É—Ç\n"
            f"üîÑ –ü–æ–ø—ã—Ç–∫–∏: {test.attempts if test.attempts else '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ'}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_results = await TestResult.filter(test=test).all()
        if test_results:
            response += "üèÜ –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            for result in test_results:
                test_user = await User.get_or_none(telegram_id=result.user_id)
                user_name = test_user.full_name if test_user and test_user.full_name else f"ID {result.user_id}"
                response += f"‚Äî {user_name}: {result.best_score} –±–∞–ª–ª–æ–≤\n"
        else:
            response += "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"

        response += "---------------------------------\n"

    await message.answer(response, parse_mode="Markdown")


# –ò—Ç–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ –µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤
async def show_user_surveys(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–ø—Ä–æ—Å–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    user = await User.get_or_none(telegram_id=message.from_user.id)
    if not user:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
        return

    user_surveys = await Survey.filter(creator=user).all()
    if not user_surveys:
        await message.answer("üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
        return

    response = "üìä –í–∞—à–∏ –æ–ø—Ä–æ—Å—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:\n\n"
    for survey in user_surveys:
        questions = await SurveyQuestion.filter(survey=survey).all()
        if not questions or not survey.survey_title:
            continue

        response += (
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {survey.survey_title}\n"
            f"üîë –ö–ª—é—á: `{survey.access_key}`\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {survey.created_at.strftime('%Y-%m-%d')}\n"
            f"üîÑ –ü–æ–ø—ã—Ç–∫–∏: {survey.attempts}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–ø—Ä–æ—Å—É
        survey_results = await calculate_survey_results(survey.id)
        response += f"{survey_results}\n"

        response += "---------------------------------\n"

    await message.answer(response, parse_mode="Markdown")
